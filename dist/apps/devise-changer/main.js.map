{"version":3,"file":"main.js","mappings":"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","sources":["webpack://devise-changer-backend/./apps/devise-changer/src/constants.ts","webpack://devise-changer-backend/./apps/devise-changer/src/currency/Currency.ts","webpack://devise-changer-backend/./apps/devise-changer/src/jobs/APIJobs.ts","webpack://devise-changer-backend/./apps/devise-changer/src/models/deviseModel.ts","webpack://devise-changer-backend/./apps/devise-changer/src/routing/api.ts","webpack://devise-changer-backend/./apps/devise-changer/src/services/AppServices.ts","webpack://devise-changer-backend/./apps/devise-changer/src/services/Currencies.ts","webpack://devise-changer-backend/./apps/devise-changer/src/utils.ts","webpack://devise-changer-backend/external commonjs \"axios\"","webpack://devise-changer-backend/external commonjs \"dotenv/config\"","webpack://devise-changer-backend/external commonjs \"express\"","webpack://devise-changer-backend/external commonjs \"mongoose\"","webpack://devise-changer-backend/external commonjs \"node-cron\"","webpack://devise-changer-backend/external commonjs \"tslib\"","webpack://devise-changer-backend/webpack/bootstrap","webpack://devise-changer-backend/./apps/devise-changer/src/main.ts"],"sourcesContent":["\r\nexport const API_BASE_URL = `https://v6.exchangerate-api.com/v6/${process.env.API_KEY}`\r\n\r\nexport const API_ENDPOINTS = {\r\n    getList: () => ({\r\n        url: `${API_BASE_URL}/supported_codes`,\r\n    }),\r\n    getRates: (devise = 'USD') => ({\r\n        url: `${API_BASE_URL}/latest/${devise}`\r\n    })\r\n};\r\n\r\nexport const CURRENCIES_NAMES = {\r\n    AED: \"Arab Emirates Dirham\",\r\n    AFN: \"Afghanistan Afghani\",\r\n    ALL: \"Albanian Lek\",\r\n    AMD: \"Armenian Dram\",\r\n    ANG: \"Dutch Guilder\",\r\n    AOA: \"Angolan Kwanza\",\r\n    ARS: \"Argentine Peso\",\r\n    AUD: \"Australian Dollar\",\r\n    AWG: \"Aruban Guilder\",\r\n    AZN: \"Azerbaijan New Manat\",\r\n    BAM: \"Marka\",\r\n    BBD: \"Barbados Dollar\",\r\n    BDT: \"Bangladeshi Taka\",\r\n    BGN: \"Bulgarian Lev\",\r\n    BHD: \"Bahraini Dinar\",\r\n    BIF: \"Burundi Franc\",\r\n    BYN: \"Belarusian Ruble\",\r\n    BMD: \"Bermudian Dollar\",\r\n    BND: \"Brunei Dollar\",\r\n    BOB: \"Boliviano\",\r\n    BRL: \"Brazilian Real\",\r\n    BSD: \"Bahamian Dollar\",\r\n    BTN: \"Bhutan Ngultrum\",\r\n    BWP: \"Botswana Pula\",\r\n    BYR: \"Belarussian Ruble\",\r\n    BZD: \"Belize Dollar\",\r\n    CAD: \"Canadian Dollar\",\r\n    CDF: \"Francs\",\r\n    CHF: \"Swiss Franc\",\r\n    CLP: \"Chilean Peso\",\r\n    CNY: \"Yuan Renminbi\",\r\n    COP: \"Colombian Peso\",\r\n    CRC: \"Costa Rican Colon\",\r\n    CUP: \"Cuban Peso\",\r\n    CVE: \"Cape Verde Escudo\",\r\n    CZK: \"Czech Koruna\",\r\n    DJF: \"Djibouti Franc\",\r\n    DKK: \"Danish Krone\",\r\n    DOP: \"Dominican Peso\",\r\n    DZD: \"Algerian Dinar\",\r\n    ECS: \"Ecuador Sucre\",\r\n    EGP: \"Egyptian Pound\",\r\n    ERN: \"Eritrean Nakfa\",\r\n    ETB: \"Ethiopian Birr\",\r\n    EUR: \"Euro\",\r\n    FJD: \"Fiji Dollar\",\r\n    FKP: \"Falkland Islands Pound\",\r\n    FOK: \"Faroese Króna\",\r\n    GTQ: \"Guatemalan Quetzal\",\r\n    IMP: \"Manx pound, Isle of Man\",\r\n    GBP: \"Pound Sterling\",\r\n    GEL: \"Georgian Lari\",\r\n    GGP: \"Pound Sterling\",\r\n    GHS: \"Ghanaian Cedi\",\r\n    GIP: \"Gibraltar Pound\",\r\n    GMD: \"Gambian Dalasi\",\r\n    GNF: \"Guinea Franc\",\r\n    GWP: \"Guinea-Bissau Peso\",\r\n    GYD: \"Guyana Dollar\",\r\n    HKD: \"Hong Kong Dollar\",\r\n    HNL: \"Honduran Lempira\",\r\n    HRK: \"Croatian Kuna\",\r\n    HTG: \"Haitian Gourde\",\r\n    HUF: \"Hungarian Forint\",\r\n    IDR: \"Indonesian Rupiah\",\r\n    ILS: \"Israeli New Shekel\",\r\n    INR: \"Indian Rupee\",\r\n    IQD: \"Iraqi Dinar\",\r\n    IRR: \"Iranian Rial\",\r\n    ISK: \"Iceland Krona\",\r\n    JMD: \"Jamaican Dollar\",\r\n    JOD: \"Jordanian Dinar\",\r\n    JPY: \"Japanese Yen\",\r\n    JEP: \"Jersey Pound\",\r\n    KES: \"Kenyan Shilling\",\r\n    KGS: \"Som\",\r\n    KHR: \"Kampuchean Riel\",\r\n    KMF: \"Comoros Franc\",\r\n    KPW: \"North Korean Won\",\r\n    KRW: \"Korean Won\",\r\n    KID: \"Kiribati Dollar\",\r\n    STN: \"São Tomé and Príncipe Dobra\",\r\n    KWD: \"Kuwaiti Dinar\",\r\n    KYD: \"Cayman Islands Dollar\",\r\n    KZT: \"Kazakhstan Tenge\",\r\n    LAK: \"Lao Kip\",\r\n    LBP: \"Lebanese Pound\",\r\n    LKR: \"Sri Lanka Rupee\",\r\n    LRD: \"Liberian Dollar\",\r\n    LSL: \"Lesotho Loti\",\r\n    LTL: \"Lithuanian Litas\",\r\n    LVL: \"Latvian Lats\",\r\n    LYD: \"Libyan Dinar\",\r\n    MAD: \"Moroccan Dirham\",\r\n    MDL: \"Moldovan Leu\",\r\n    MGF: \"Malagasy Franc\",\r\n    MKD: \"Denar\",\r\n    MMK: \"Myanmar Kyat\",\r\n    MNT: \"Mongolian Tugrik\",\r\n    MOP: \"Macau Pataca\",\r\n    MRO: \"Mauritanian Ouguiya\",\r\n    MGA: \"Malagasy ariary\",\r\n    MRU: \"Mauritanian ouguiya\",\r\n    MUR: \"Mauritius Rupee\",\r\n    MVR: \"Maldive Rufiyaa\",\r\n    MWK: \"Malawi Kwacha\",\r\n    MXN: \"Mexican Nuevo Peso\",\r\n    MYR: \"Malaysian Ringgit\",\r\n    MZN: \"Mozambique Metical\",\r\n    NAD: \"Namibian Dollar\",\r\n    NGN: \"Nigerian Naira\",\r\n    NIO: \"Nicaraguan Cordoba Oro\",\r\n    NOK: \"Norwegian Krone\",\r\n    NPR: \"Nepalese Rupee\",\r\n    NZD: \"New Zealand Dollar\",\r\n    OMR: \"Omani Rial\",\r\n    PAB: \"Panamanian Balboa\",\r\n    PEN: \"Peruvian Nuevo Sol\",\r\n    PGK: \"Papua New Guinea Kina\",\r\n    PHP: \"Philippine Peso\",\r\n    PKR: \"Pakistan Rupee\",\r\n    PLN: \"Polish Zloty\",\r\n    PYG: \"Paraguay Guarani\",\r\n    QAR: \"Qatari Rial\",\r\n    QTQ: \"Guatemalan Quetzal\",\r\n    RON: \"Romanian New Leu\",\r\n    RSD: \"Dinar\",\r\n    RUB: \"Russian Ruble\",\r\n    RWF: \"Rwanda Franc\",\r\n    SAR: \"Saudi Riyal\",\r\n    SBD: \"Solomon Islands Dollar\",\r\n    SCR: \"Seychelles Rupee\",\r\n    SDG: \"Sudanese Pound\",\r\n    SEK: \"Swedish Krona\",\r\n    SGD: \"Singapore Dollar\",\r\n    SHP: \"St. Helena Pound\",\r\n    SLL: \"Sierra Leone Leone\",\r\n    SOS: \"Somali Shilling\",\r\n    SRD: \"Surinam Dollar\",\r\n    SSP: \"South Sudan Pound\",\r\n    STD: \"Dobra\",\r\n    SVC: \"El Salvador Colon\",\r\n    SYP: \"Syrian Pound\",\r\n    SZL: \"Swaziland Lilangeni\",\r\n    THB: \"Thai Baht\",\r\n    TJS: \"Tajik Somoni\",\r\n    TMT: \"Manat\",\r\n    TND: \"Tunisian Dollar\",\r\n    TOP: \"Tongan Pa'anga\",\r\n    TRY: \"Turkish Lira\",\r\n    TTD: \"Trinidad and Tobago Dollar\",\r\n    TWD: \"Taiwan Dollar\",\r\n    TZS: \"Tanzanian Shilling\",\r\n    TVD: \"Tuvaluan Dollar\",\r\n    UAH: \"Ukraine Hryvnia\",\r\n    UGX: \"Uganda Shilling\",\r\n    USD: \"US Dollar\",\r\n    UYU: \"Uruguayan Peso\",\r\n    UZS: \"Uzbekistan Sum\",\r\n    VEF: \"Venezuelan Bolivar\",\r\n    VND: \"Vietnamese Dong\",\r\n    VUV: \"Vanuatu Vatu\",\r\n    VES: \"Venezuelan Bolívar\",\r\n    WST: \"Samoan Tala\",\r\n    XAF: \"CFA Franc BEAC\",\r\n    XCD: \"East Caribbean Dollar\",\r\n    XOF: \"CFA Franc BCEAO\",\r\n    XPF: \"CFP Franc\",\r\n    XDR: \"Special Drawing Right\",\r\n    YER: \"Yemeni Rial\",\r\n    ZAR: \"South African Rand\",\r\n    ZMW: \"Zambian Kwacha\",\r\n    ZWD: \"Zimbabwe Dollar\",\r\n    ZWL: \"Zimbabwean Dollar\",\r\n\r\n} ","import {CurrencyInterface, CurrencyModelInterface, CurrencyRateInterface} from \"../Interfaces\";\r\nimport { CurrencyModel } from \"../models/deviseModel\";\r\nimport { formatDate } from \"../utils\";\r\n\r\nexport default class Currency {\r\n    rateFromUSD: any[];\r\n    USDRatesArray: CurrencyInterface[];\r\n    symbol: string;\r\n    USDRate: number;\r\n    rates: CurrencyRateInterface[];\r\n    ModelInstance: CurrencyModelInterface;\r\n    constructor(rateFromUSD : any[], USDRatesArray : any[]) {\r\n        this.getCurrencyKeyValue(rateFromUSD, true);\r\n        this.USDRatesArray = USDRatesArray.reduce((acc : any, curr :any) => {\r\n            const currency = this.getCurrencyKeyValue(curr, false);\r\n            return [...acc, currency]\r\n        }, []) ;\r\n        this.rates = this.USDRatesArray.map((currency) => this.getCurrencyRatio(currency))\r\n          .filter((item) => typeof item !=='undefined')\r\n    }\r\n    getCurrencyKeyValue (currencyObj : any, isMainCurrency : boolean) : CurrencyInterface {\r\n        let symbol : string, USDRate : number  ;\r\n        Object.entries(currencyObj).forEach((obj : any[]) => {\r\n            [symbol, USDRate] = obj;\r\n        })\r\n        if (isMainCurrency) {\r\n            this.symbol = symbol;\r\n            this.USDRate = USDRate;\r\n        }\r\n        return {\r\n            symbol : symbol,\r\n            USDRate : USDRate\r\n        }\r\n    }\r\n    getCurrencyRatio (currencyObj : CurrencyInterface) : CurrencyRateInterface{\r\n        if (currencyObj.symbol === this.symbol) {\r\n            return;\r\n        };\r\n        const ratio = currencyObj.USDRate / this.USDRate;\r\n        return {\r\n            symbol : currencyObj.symbol,\r\n            value : Number(ratio.toFixed(4))\r\n        };\r\n    }\r\n    async getInstance() {\r\n        await CurrencyModel.findOne({symbol: this.symbol, date : formatDate(Date.now(), 'dd-mm-yyyy')}).exec().then((result) => {\r\n            this.ModelInstance = result ? result : new CurrencyModel({symbol : this.symbol})\r\n        })\r\n    }\r\n    async updateData() {\r\n        await this.getInstance()\r\n        this.ModelInstance.rates = this.rates;\r\n        this.ModelInstance.date = formatDate(Date.now(), 'dd-mm-yyyy');\r\n        await this.ModelInstance.save()\r\n    }\r\n}\r\n","import * as cron from 'node-cron';\r\nimport { updateCurrencies } from '../services/Currencies';\r\n\r\nexport default function updateDataJob() { \r\n    cron.schedule('0 0 * * *', () => {\r\n        updateCurrencies();\r\n    })\r\n}\r\n","import mongoose from \"mongoose\"\r\nimport {formatDate} from '../utils'\r\nimport {CurrencyModelInterface} from \"../Interfaces\";\r\n\r\nconst CurrencySchema = new mongoose.Schema<CurrencyModelInterface>({\r\n    symbol : {type : String, require: true },\r\n    rates : [mongoose.Schema.Types.Mixed],\r\n    date: { type: String, require: true, default: formatDate(Date.now(), 'dd-mm-yyyy') },\r\n});\r\n\r\nexport const CurrencyModel = mongoose.model<CurrencyModelInterface>('Currency', CurrencySchema)\r\n","import { Router} from \"express\"\r\nimport { CurrencyModel } from \"../models/deviseModel\"\r\nimport { getAvailiableCurrencies, updateCurrencies } from \"../services/Currencies\"\r\nimport { formatDate, getCurrencyNameBySymbol } from \"../utils\"\r\nexport const router = Router()\r\nrouter.get('/availables',(req, res) => {\r\n    getAvailiableCurrencies((data) => {\r\n        const currenciesList =  data.reduce((acc, curr) => {\r\n            const currencyName = getCurrencyNameBySymbol(curr);\r\n            const currency = {\r\n                name : currencyName,\r\n                symbol : curr,\r\n            };\r\n            return [...acc, currency]\r\n        }, [])\r\n        res.json(currenciesList)\r\n    }\r\n    )\r\n})\r\nrouter.get('/forceUpdate', (req, res) => {\r\n    updateCurrencies().then(() => res.json({message : 'data has been updated'}))\r\n})\r\n\r\nrouter.get('/rates/:from', (req, res) => {\r\n    const {from} = req.params\r\n    CurrencyModel.findOne({date : formatDate(Date.now(), 'dd-mm-yyyy'), symbol : from.toUpperCase()}).exec((error, curruency) =>{\r\n        res.json(curruency.rates)\r\n    })\r\n})\r\n","import mongoose from \"mongoose\";\r\nimport updateDataJob from \"../jobs/APIJobs\";\r\n\r\nexport default async function AppService() {\r\n    mongoose.connect('mongodb+srv://scotdev:Narutokun2021@cluster0.djltuwm.mongodb.net/?retryWrites=true&w=majority')\r\n    .then((res) => {\r\n        updateDataJob();\r\n    })\r\n    .catch((err) => {\r\n        throw new Error(`la base de donnee est indisponible ${err.message}`)\r\n    });\r\n}","import axios from 'axios'\r\nimport { API_ENDPOINTS } from '../constants'\r\nimport Currency from '../currency/Currency'\r\nimport { CurrencyModel } from '../models/deviseModel'\r\nimport { convertObjecttoArrayOfObjects, formatDate } from '../utils'\r\n\r\nexport async function updateCurrencies() {\r\n    await axios.get(API_ENDPOINTS.getRates().url)\r\n            .then((res) => {\r\n                const USDCurrenciesRates = convertObjecttoArrayOfObjects(res.data.conversion_rates)\r\n                const currenciesList = USDCurrenciesRates.map((currency) => new Currency(currency, USDCurrenciesRates));\r\n                currenciesList.forEach(currency => {\r\n                    currency.updateData();\r\n                })\r\n                console.log('ok')\r\n                }\r\n            )\r\n} \r\nexport function getAvailiableCurrencies(func) {\r\n    const currencies = CurrencyModel.find({ date : formatDate(Date.now(), 'dd-mm-yyyy')}, 'symbol')\r\n    currencies.exec(function(err, symbols) {\r\n        if (err) {\r\n            throw new Error(err.message)\r\n        }\r\n        const data = symbols.reduce((acc, curr) => {\r\n            const {symbol} = curr;\r\n            return [...acc, symbol]\r\n        }, [])\r\n        func(data);        \r\n    })\r\n}","import { CURRENCIES_NAMES } from \"./constants\";\r\n\r\nexport const formatDate = (timestamp : number, format : string) : string => {\r\n    const date = new Date(timestamp)\r\n    return format.replace('mm', `${date.getMonth() + 1}`)\r\n        .replace('yyyy', `${date.getFullYear()}`)\r\n        .replace('dd', `${date.getDate()}`);\r\n}\r\nexport const convertObjecttoArrayOfObjects = (obj : any) : any[] => {\r\n\r\n    const array : any[] = Object.entries(obj).map((currency) => {\r\n        const [symbol, USDRate] = currency;\r\n        return {[symbol] : USDRate}\r\n    })\r\n    return array\r\n}\r\nexport const getCurrencyNameBySymbol = (symbol : string) : string => {\r\n    return CURRENCIES_NAMES[symbol.toUpperCase()]\r\n}\r\n","module.exports = require(\"axios\");","module.exports = require(\"dotenv/config\");","module.exports = require(\"express\");","module.exports = require(\"mongoose\");","module.exports = require(\"node-cron\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport * as express from 'express';\r\nimport 'dotenv/config'\r\n\r\nimport AppService from './services/AppServices'\r\nimport { router } from './routing/api';\r\n\r\nconst app = express();\r\n\r\nAppService()\r\napp.use((req, res, next) => {\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content, Accept, Content-Type, Authorization');\r\n  console.log('receive')\r\n  next();\r\n});\r\n\r\napp.use('/api', router);\r\n\r\nconst port = process.env.port || 3333;\r\nconst server = app.listen(port, () => {\r\n  console.log(`Listening at http://localhost:${port}/api`);\r\n});\r\nserver.on('error', console.error);\r\n\r\n"],"names":[],"sourceRoot":""}